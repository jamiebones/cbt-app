version: "3.8"

services:
  # Frontend React Application (Development)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://localhost:4000
      - REACT_APP_LOCAL_SERVER_URL=http://localhost:5000
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend
    networks:
      - cbt-network

  # Monolithic Backend Server
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    ports:
      - "4000:4000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./media:/app/uploads
    environment:
      - NODE_ENV=development
      - PORT=4000
      - MONGODB_URL=mongodb://${CBT_USER}:${CBT_USER_PASSWORD}@mongo:27017/cbt_app
      - REDIS_URL=redis://redis:6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - CBT_USER=${CBT_USER}
      - CBT_USER_PASSWORD=${CBT_USER_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_EXPIRES_IN=15m
      - JWT_REFRESH_EXPIRES_IN=7d
      - STRIPE_SECRET_KEY=${STRIPE_SECRET_KEY}
      - PAYPAL_CLIENT_ID=${PAYPAL_CLIENT_ID}
      - PAYPAL_CLIENT_SECRET=${PAYPAL_CLIENT_SECRET}
      - UPLOAD_PATH=/app/uploads
      - MAX_FILE_SIZE=10485760
      - MAX_IMAGE_SIZE=5242880
      - MAX_AUDIO_SIZE=10485760
    depends_on:
      - mongo
      - redis
    networks:
      - cbt-network

  # Local Server for Offline Test Delivery (same monolithic codebase)
  local-server:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    ports:
      - "5000:5000"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./local-media:/app/uploads
      - ./local-data:/app/data
    environment:
      - NODE_ENV=local
      - PORT=5000
      - MONGODB_URL=mongodb://local-mongo:27017/cbt_local
      - REDIS_URL=redis://local-redis:6379
      - SYNC_SERVER_URL=http://backend:4000
      - JWT_SECRET=${JWT_SECRET}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - UPLOAD_PATH=/app/uploads
      - MAX_FILE_SIZE=10485760
      - MAX_IMAGE_SIZE=5242880
      - MAX_AUDIO_SIZE=10485760
    depends_on:
      - local-mongo
      - local-redis
    networks:
      - cbt-network

  # MongoDB - Main Database
  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
      - ./docker/mongo-init:/docker-entrypoint-initdb.d
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=cbt_app
    networks:
      - cbt-network

  # MongoDB - Local Database for Offline Operations
  local-mongo:
    image: mongo:6
    ports:
      - "27018:27017"
    volumes:
      - local_mongo_data:/data/db
    environment:
      - MONGO_INITDB_DATABASE=cbt_local
    networks:
      - cbt-network

  # Redis - Main Cache and Session Store
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    networks:
      - cbt-network

  # Redis - Local Cache for Offline Operations
  local-redis:
    image: redis:7-alpine
    ports:
      - "6380:6379"
    volumes:
      - local_redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - cbt-network

  # NGINX Load Balancer (Optional for production-like setup)
  # NGINX Load Balancer (Optional - for production-like testing)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./docker/nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - cbt-network
    profiles:
      - loadbalancer

volumes:
  mongo_data:
    driver: local
  local_mongo_data:
    driver: local
  redis_data:
    driver: local
  local_redis_data:
    driver: local

networks:
  cbt-network:
    driver: bridge
